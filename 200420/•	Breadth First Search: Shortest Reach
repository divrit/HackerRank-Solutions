import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the bfs function below.
   static int[] bfs(int n, int m, int[][] edges, int s) {
        int first;
        
        int second;

      Graph graph=new Graph(n);
        for(int i=0;i<edges.length;i++){
            
                first=edges[i][0];
                second=edges[i][1];

                
          graph.addEdge(first,second);
        }
  
        return  graph.shortestPath(s);
    }
   public static class Graph{
       Map<Integer,Set<Integer>> myGraph;

       public Graph(int size){
           myGraph=new HashMap<Integer,Set<Integer>>();
           for(int i=1;i<=size;i++){
                    myGraph.put(i,new HashSet<Integer>());
           }

       }
       public void addEdge(int first,int second){
           myGraph.get(first).add(second);
           myGraph.get(second).add(first);

       }
        public int[] shortestPath(int startId){
            int[] distance=new int[myGraph.size()+1];
            Arrays.fill(distance,-1);

                Set<Integer> nodesVisited=new HashSet<Integer>();
                Queue<Integer> nodesToVisit=new LinkedList<Integer>();
                nodesToVisit.add(startId);                 
                   distance[startId] = 0;
                while(nodesToVisit.size()>0){

                    Integer curNode=nodesToVisit.poll();
                    nodesVisited.add(curNode);
                for(int i: myGraph.get(curNode)){
                    if(!nodesVisited.contains(i)){
                        nodesToVisit.add(i);
                        nodesVisited.add(i);
                        distance[i] = distance[curNode] + 1;
                    }
                }   
                }
        //         for( int i = 1; i < distance.length ; i++){
        // if( i != startId && distance[i] > -1) {
        //   distance[i]=distance[i] * 6;
        //         }
        //         else if( i != startId && distance[i] == -1) {
        //             distance[i]=distance[i];
        //         }
                
        // }
return distance;
        }
   }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        // BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nm = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nm[0]);
            // Graph myGraph=new Graph(n);

            int m = Integer.parseInt(nm[1]);

            int[][] edges = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] edgesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int edgesItem = Integer.parseInt(edgesRowItems[j]);
                    edges[i][j] = edgesItem;
                }
            }

            int s = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] result = bfs(n, m, edges, s);

            for( int i = 1; i < result.length ; i++){
        if( i != s && result[i] > -1) {
          System.out.print(result[i] * 6+" ");
        } else if( i != s && result[i] == -1) {
          System.out.print(result[i]+" ");
        }
        }System.out.println();
    //   }System.out.printf("\n");

            // for (int i = 0; i < result.length; i++) {
            //     bufferedWriter.write(String.valueOf(result[i]));

            //     if (i != result.length - 1) {
            //         bufferedWriter.write(" ");
            //     }
            // }

            // bufferedWriter.newLine();
        }

        // bufferedWriter.close();

        // scanner.close();
    }
}
